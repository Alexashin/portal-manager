from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm import FSMContext
from db.db_controller import get_all_modules, get_lessons_by_module
from filters.role_filter import RoleFilter

user_router = Router()

# –ö–æ–º–∞–Ω–¥–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π
@user_router.message(RoleFilter("intern"), F.text == "/modules")
async def show_modules(message: Message):
    modules = await get_all_modules()
    
    if not modules:
        await message.answer("üìö –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text=module['title'], callback_data=f"open_module_{module['id']}")]
            for module in modules
        ]
    )

    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è:", reply_markup=keyboard)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –º–æ–¥—É–ª—è
@user_router.callback_query(F.data.startswith("open_module_"))
async def open_module(callback: CallbackQuery):
    module_id = int(callback.data.split("_")[-1])
    lessons = await get_lessons_by_module(module_id)

    if not lessons:
        await callback.message.answer("‚ùó –£ —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤.")
        return

    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫
    await send_lesson(callback.message, lessons, 0)

# –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ä–æ–∫–∞
async def send_lesson(message: Message, lessons, index):
    lesson = lessons[index]
    total_lessons = len(lessons)

    text = f"<b>{lesson['title']}</b>\n\n{lesson['content']}"
    
    # –ö–Ω–æ–ø–∫–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
    buttons = []
    if index > 0:
        buttons.append(InlineKeyboardButton(text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"lesson_{index - 1}"))
    if index < total_lessons - 1:
        buttons.append(InlineKeyboardButton(text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"lesson_{index + 1}"))
    buttons.append(InlineKeyboardButton(text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data="finish_lesson"))

    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])

    await message.answer(text, reply_markup=keyboard)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ñ–∞–π–ª–æ–≤
    for file_id in lesson.get('file_ids', []):
        await message.answer_document(file_id)

    # –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ
    for video_id in lesson.get('video_ids', []):
        await message.answer_video(video_id)

# –ù–∞–≤–∏–≥–∞—Ü–∏—è –ø–æ —É—Ä–æ–∫–∞–º
@user_router.callback_query(F.data.startswith("lesson_"))
async def navigate_lessons(callback: CallbackQuery, state: FSMContext):
    _, module_id, index = callback.data.split("_")
    lessons = await get_lessons_by_module(int(module_id))
    await send_lesson(callback.message, lessons, int(index))

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–æ–¥—É–ª—è
@user_router.callback_query(F.data == "finish_lesson")
async def finish_lesson(callback: CallbackQuery):
    await callback.message.answer("üéâ –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –∏–∑—É—á–µ–Ω–∏–µ –º–æ–¥—É–ª—è!")

@user_router.message(F.text == "üìñ –ú–∞—Ç–µ—Ä–∏–∞–ª—ã")
async def show_materials(message: Message):
    await message.answer("üìñ –í–æ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã...")