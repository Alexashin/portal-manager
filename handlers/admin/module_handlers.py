import db
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from filters import RoleFilter
from contexts import ModuleCreationFSM, ModuleEditFSM, TestCreationFSM
from keyboards import (
    get_modules_admin_keyboard,
    get_module_management_keyboard,
    get_back_keyboard,
    get_admin_keyboard,
    get_dangerous_accept_keyboard,
)
from handlers.admin.main_handlers import is_back

admin_router = Router()


# –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π
@admin_router.callback_query(RoleFilter("manager"), F.data == "list_modules")
async def show_modules(callback: CallbackQuery):
    modules = await db.get_all_modules()
    if not modules:
        await callback.message.answer("‚ùó –ú–æ–¥—É–ª–∏ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.")
        await callback.answer()
        return
    await callback.message.answer(
        "üìö –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π:", reply_markup=get_modules_admin_keyboard(modules)
    )
    await callback.answer()


# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è
@admin_router.callback_query(F.data.startswith("admin_view_module_"))
async def view_module(callback: CallbackQuery):
    module_id = int(callback.data.split("_")[-1])
    await callback.message.answer(
        f"üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–º #{module_id}",
        reply_markup=get_module_management_keyboard(module_id),
    )
    await callback.answer()


"""
_____________________________________–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø_________________________________________
"""


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è –º–æ–¥—É–ª—è
@admin_router.callback_query(F.data.startswith("edit_module_title_and_desc_"))
async def edit_module(callback: CallbackQuery, state: FSMContext):
    module_id = int(callback.data.split("_")[-1])
    await state.update_data(module_id=module_id)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip):",
        reply_markup=get_back_keyboard(),
    )
    await callback.answer()
    await state.set_state(ModuleEditFSM.waiting_for_edit_module_title)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
@admin_router.message(ModuleEditFSM.waiting_for_edit_module_title)
async def get_new_module_title(message: Message, state: FSMContext):
    if await is_back(message, state):
        return
    if message.text != "/skip":
        await state.update_data(new_title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip):")
    await state.set_state(ModuleEditFSM.waiting_for_edit_module_description)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
@admin_router.message(ModuleEditFSM.waiting_for_edit_module_description)
async def get_new_module_description(message: Message, state: FSMContext):
    if await is_back(message, state):
        return
    if message.text == "/skip":
        new_description = ""
    new_description = message.text if message.text != "/skip" else ""
    data = await state.get_data()
    module_id = data.get("module_id")
    new_title = data.get("new_title", "")

    await db.update_module(module_id, new_title, new_description)
    await message.answer("‚úèÔ∏è –ú–æ–¥—É–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=get_admin_keyboard())
    await state.clear()


# –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è
@admin_router.callback_query(F.data.startswith("delete_module_"))
async def delete_selected_module(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(
        "–£–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å –∏ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –Ω–µ–º—É —É—Ä–æ–∫–∏?",
        reply_markup=get_dangerous_accept_keyboard(callback.data),
    )
    await callback.answer()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª—è
@admin_router.callback_query(F.data.startswith("accept_delete_module_"))
async def accept_module_deleting(callback: CallbackQuery):
    module_id = int(callback.data.split("_")[-1])
    await db.delete_module(module_id)
    await callback.message.answer("üóë –ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    await callback.answer()
    modules = await db.get_all_modules()
    if not modules:
        await callback.message.answer("‚ùó –ú–æ–¥—É–ª–µ–π –±–æ–ª—å—à–µ –Ω–µ—Ç.")
        return
    await callback.message.answer(
        "üìö –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π:", reply_markup=get_modules_admin_keyboard(modules)
    )


@admin_router.callback_query(F.data.startswith("cancel_delete_module_"))
async def cancel_module_deleting(callback: CallbackQuery):
    modules = await db.get_all_modules()
    await callback.message.answer(
        "üìö –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π:", reply_markup=get_modules_admin_keyboard(modules)
    )
    await callback.answer()


"""
_____________________________________–°–û–ó–î–ê–ù–ò–ï –ú–û–î–£–õ–Ø_________________________________________
"""


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å"
@admin_router.callback_query(F.data == "create_new_module")
async def create_module(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è üìö:", reply_markup=get_back_keyboard()
    )
    await callback.answer()
    await state.set_state(ModuleCreationFSM.waiting_for_module_title)


# –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è
@admin_router.message(ModuleCreationFSM.waiting_for_module_title)
async def get_module_title(message: Message, state: FSMContext):
    if await is_back(message, state):
        return
    await state.update_data(module_title=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è üìù:")
    await state.set_state(ModuleCreationFSM.waiting_for_module_description)


# –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –º–æ–¥—É–ª—è
@admin_router.message(ModuleCreationFSM.waiting_for_module_description)
async def get_module_description(message: Message, state: FSMContext):
    if await is_back(message, state):
        return
    await state.update_data(module_description=message.text)
    await message.answer("–î–æ–±–∞–≤–∏–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ üìñ:")
    await state.set_state(ModuleCreationFSM.waiting_for_lesson_title)


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–æ–¥—É–ª—è
@admin_router.callback_query(F.data == "finish_module")
async def start_test_creation(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    module_title = data.get("module_title")
    module_description = data.get("module_description")
    lessons = data.get("lessons", [])

    if not module_title or not lessons:
        await callback.message.answer(
            "‚ùó –ú–æ–¥—É–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ —É—Ä–æ–∫–æ–≤."
        )
        return

    # –°–æ–∑–¥–∞—ë–º –º–æ–¥—É–ª—å –±–µ–∑ —Ç–µ—Å—Ç–∞, —á—Ç–æ–±—ã —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å ID –¥–ª—è —Ç–µ—Å—Ç–∞
    module_id = await db.create_module(module_title, module_description)
    await state.update_data(module_id=module_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —É—Ä–æ–∫–∏
    for order, lesson in enumerate(lessons, start=1):
        await db.add_lesson(
            module_id=module_id,
            title=lesson["title"],
            content=lesson["content"],
            file_ids=lesson["files"],
            video_ids=lesson["videos"],
            order=order,
        )

    await callback.message.answer(
        "–¢–µ–ø–µ—Ä—å —Å–æ–∑–¥–∞–π—Ç–µ —Ç–µ—Å—Ç –¥–ª—è –º–æ–¥—É–ª—è. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:",
        reply_markup=get_back_keyboard(),
    )
    await callback.answer()
    await state.update_data(in_module_creation=True)
    await state.set_state(TestCreationFSM.waiting_for_question)
