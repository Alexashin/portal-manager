from aiogram import Router, F
from aiogram.types import CallbackQuery, Message
from aiogram.fsm.context import FSMContext
from db.db_controller import add_question_to_test, delete_test, get_test_questions
from contexts import TestCreation, ModuleCreation
from keyboards import *

admin_router = Router()

# –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–æ–º
@admin_router.callback_query(F.data.startswith("manage_test_"))
async def manage_test(callback: CallbackQuery):
    module_id = int(callback.data.split("_")[-1])
    await callback.message.answer(
        "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ –¥–ª—è —Ç–µ—Å—Ç–∞:",
        reply_markup=get_test_management_keyboard(module_id),
    )
    await callback.answer()


# –ù–∞—á–∞–ª–æ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
@admin_router.callback_query(F.data.startswith("add_test_question_"))
async def start_test_creation(callback: CallbackQuery, state: FSMContext):
    module_id = int(callback.data.split("_")[-1])
    await state.update_data(module_id=module_id, questions=[])
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –ø–µ—Ä–≤–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:", reply_markup=get_back_keyboard()
    )
    await callback.answer()
    await state.set_state(TestCreation.waiting_for_question)


# –í–≤–æ–¥ –≤–æ–ø—Ä–æ—Å–∞
@admin_router.message(TestCreation.waiting_for_question)
async def add_question_text(message: Message, state: FSMContext):
    await state.update_data(current_question=message.text.strip())
    await message.answer("–í–≤–µ–¥–∏—Ç–µ 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞ (–∫–∞–∂–¥—ã–π —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏):")
    await state.set_state(TestCreation.waiting_for_options)


# –í–≤–æ–¥ –≤–∞—Ä–∏–∞–Ω—Ç–æ–≤ –æ—Ç–≤–µ—Ç–∞
@admin_router.message(TestCreation.waiting_for_options)
async def add_options(message: Message, state: FSMContext):
    options = message.text.strip().split("\n")
    if len(options) != 4:
        await message.answer("–î–æ–ª–∂–Ω–æ –±—ã—Ç—å 4 –≤–∞—Ä–∏–∞–Ω—Ç–∞ –æ—Ç–≤–µ—Ç–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        return

    await state.update_data(current_options=options)
    await message.answer("–ö–∞–∫–æ–π –≤–∞—Ä–∏–∞–Ω—Ç –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π? –í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä (1-4):")
    await state.set_state(TestCreation.waiting_for_correct_option)


# –í–≤–æ–¥ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞
@admin_router.message(TestCreation.waiting_for_correct_option)
async def add_correct_option(message: Message, state: FSMContext):
    try:
        correct_option = int(message.text.strip())
        if correct_option not in [1, 2, 3, 4]:
            raise ValueError
    except ValueError:
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ (1-4).")
        return

    data = await state.get_data()
    module_id = data.get("module_id")
    question = data.get("current_question")
    options = data.get("current_options")

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤–æ–ø—Ä–æ—Å–∞ –≤ –ë–î
    await add_question_to_test(module_id, question, options, correct_option)

    await message.answer(
        "–í–æ–ø—Ä–æ—Å –¥–æ–±–∞–≤–ª–µ–Ω. –•–æ—Ç–∏—Ç–µ –∑–∞–≤–µ—Ä—à–∏—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–∞ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å –µ—â—ë –æ–¥–∏–Ω –≤–æ–ø—Ä–æ—Å?",
        reply_markup=get_finish_test_keyboard(),
    )
    data = await state.get_data()
    in_module_creation = data.get('in_module_creation', False)
    if in_module_creation:
        await state.set_state(ModuleCreation.waiting_for_test_creation)
    else:
        await state.set_state(TestCreation.waiting_for_next_action)


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
@admin_router.callback_query(F.data == "finish_test_creation", ModuleCreation.waiting_for_test_creation)
async def finish_test_creation(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    module_title = data.get("module_title")

    await callback.message.answer(
        f"üìö –ú–æ–¥—É–ª—å '{module_title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω –≤–º–µ—Å—Ç–µ —Å —Ç–µ—Å—Ç–æ–º!",
        reply_markup=get_admin_keyboard()
    )
    await state.clear()
    await callback.answer()

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–∞
@admin_router.callback_query(F.data == "finish_test_creation", TestCreation.waiting_for_next_action)
async def finish_test_creation(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    module_title = data.get("module_title")

    await callback.message.answer(
        f"üìö –¢–µ—Å—Ç –¥–ª—è –º–æ–¥—É–ª—è '{module_title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!",
        reply_markup=get_admin_keyboard()
    )
    await state.clear()
    await callback.answer()


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –µ—â—ë –æ–¥–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
@admin_router.callback_query(F.data == "add_another_question")
async def add_another_question(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞:")
    await callback.answer()
    await state.set_state(TestCreation.waiting_for_question)


# –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞
@admin_router.callback_query(F.data.startswith("delete_test_"))
async def confirm_delete_test(callback: CallbackQuery):
    module_id = int(callback.data.split("_")[-1])
    await callback.message.answer(
        "‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —Ç–µ—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è?",
        reply_markup=get_dangerous_accept_keyboard(action=f"delete_test_{module_id}"),
    )
    await callback.answer()


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
@admin_router.callback_query(F.data.startswith("accept_delete_test_"))
async def delete_test_handler(callback: CallbackQuery):
    module_id = int(callback.data.split("_")[-1])

    # –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await delete_test(module_id)

    await callback.message.answer("‚ùå –¢–µ—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    await callback.answer()


# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
@admin_router.callback_query(F.data.startswith("cancel_delete_test_"))
async def cancel_delete_test(callback: CallbackQuery):
    await callback.message.answer("–£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ—Å—Ç–∞ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()


# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ç–µ—Å—Ç–∞
@admin_router.callback_query(F.data.startswith("view_test_"))
async def view_test_handler(callback: CallbackQuery):
    module_id = int(callback.data.split("_")[-1])

    # –ü–æ–ª—É—á–∞–µ–º —Å–ø–∏—Å–æ–∫ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    questions = await get_test_questions(module_id)

    if not questions:
        await callback.message.answer("‚ùó –¢–µ—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.")
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤–æ–ø—Ä–æ—Å–∞–º–∏
    response = "üìã –í–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞:\n\n"
    for idx, question in enumerate(questions, start=1):
        response += f"{idx}. {question['question']}\n"
        response += f"  1Ô∏è‚É£ {question['option_1']}\n"
        response += f"  2Ô∏è‚É£ {question['option_2']}\n"
        response += f"  3Ô∏è‚É£ {question['option_3']}\n"
        response += f"  4Ô∏è‚É£ {question['option_4']}\n"
        response += f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {question['correct_option']}\n\n"

    await callback.message.answer(response)
    await callback.answer()
