import db
import logging
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from contexts import EmployeeFSM
from keyboards import (
    get_user_role_selector_keyboard,
    get_user_managment_keyboard,
    get_user_role_managment_keyboard,
)

admin_router = Router()

log = logging.getLogger(__name__)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@admin_router.callback_query(F.data == "add_user")
async def request_employee_identifier(callback: CallbackQuery, state: FSMContext):
    await state.set_state(EmployeeFSM.waiting_for_identifier)
    await callback.message.answer(
        "üìå –û—Ç–ø—Ä–∞–≤—å—Ç–µ Telegram ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è. –î–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —ç—Ç–æ–≥–æ –∫–æ–¥–∞, –µ–º—É —Ç—Ä–µ–±—É–µ—Ç—Å—è –Ω–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥ —Å –±–æ—Ç–æ–º."
    )
    await callback.answer()


# –í–≤–æ–¥ tg_id –Ω–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
@admin_router.message(EmployeeFSM.waiting_for_identifier)
async def get_employee_identifier(message: Message, state: FSMContext):
    try:
        user_id = int(message.text)
    except ValueError:
        await message.answer("‚ùó –ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π Telegram ID. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑.")
        return

    await state.update_data(user_id=user_id)
    await state.set_state(EmployeeFSM.waiting_for_full_name)
    await message.answer("üìå –í–≤–µ–¥–∏—Ç–µ –§–ò–û –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞.")


# –í—ã–±–æ—Ä —Ä–æ–ª–∏ –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@admin_router.message(EmployeeFSM.waiting_for_full_name)
async def get_employee_full_name(message: Message, state: FSMContext):
    await state.update_data(full_name=message.text)
    await state.set_state(EmployeeFSM.waiting_for_role)
    await message.answer(
        "üìå –í—ã–±–µ—Ä–∏—Ç–µ —Ä–æ–ª—å –Ω–æ–≤–æ–≥–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞:",
        reply_markup=get_user_role_selector_keyboard(),
    )


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞ –≤ –ë–î
@admin_router.callback_query(
    EmployeeFSM.waiting_for_role, F.data.startswith("set_role_")
)
async def set_employee_role(callback: CallbackQuery, state: FSMContext):
    role = callback.data.split("_")[-1]  # –ü–æ–ª—É—á–∞–µ–º —Ä–æ–ª—å (intern, employee, manager)
    role_name = {"intern": "–°—Ç–∞–∂—ë—Ä", "employee": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "manager": "–ú–µ–Ω–µ–¥–∂–µ—Ä"}[
        role
    ]

    data = await state.get_data()
    user_id = data.get("user_id")
    full_name = data.get("full_name")

    await db.add_employee(user_id, full_name, role)
    await callback.message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} ({user_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ {role_name}."
    )
    log.info(
        f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {full_name} ({user_id}) –¥–æ–±–∞–≤–ª–µ–Ω –≤ —Å–∏—Å—Ç–µ–º—É –∫–∞–∫ {role_name}, –º–µ–Ω–µ–¥–∂–µ—Ä {callback.from_user.id}"
    )
    await state.clear()


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ
@admin_router.callback_query(F.data.startswith("view_user_"))
async def view_user(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[-1])
    user_info = await db.get_employee_info(user_id)

    if not user_info:
        await callback.message.answer("‚ùó –î–∞–Ω–Ω—ã–π —Å–æ—Ç—Ä—É–¥–Ω–∏–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        return

    response = "üìå <b>–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–µ:</b>\n"
    response += f"üë§ –ò–º—è: {user_info['full_name']}\n"
    response += f"üÜî Telegram ID: {user_id}\n"
    response += f"üìÖ –î–∞—Ç–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏: {user_info['created_at']}\n"

    await callback.message.answer(
        response, reply_markup=get_user_managment_keyboard(user_id)
    )


# –ò–∑–º–µ–Ω–µ–Ω–∏–µ —Ä–æ–ª–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@admin_router.callback_query(F.data.startswith("change_role_"))
async def change_role(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[-1])
    await callback.message.answer(
        "üîÑ –í—ã–±–µ—Ä–∏—Ç–µ –Ω–æ–≤—É—é —Ä–æ–ª—å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:",
        reply_markup=get_user_role_managment_keyboard(user_id),
    )


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–º–µ–Ω—ã —Ä–æ–ª–∏
@admin_router.callback_query(F.data.startswith("set_role_"))
async def set_role(callback: CallbackQuery):
    parts = callback.data.split("_")
    role = parts[2]
    user_id = int(parts[3])

    role_name = {"intern": "–°—Ç–∞–∂—ë—Ä", "employee": "–°–æ—Ç—Ä—É–¥–Ω–∏–∫", "manager": "–ú–µ–Ω–µ–¥–∂–µ—Ä"}[
        role
    ]

    await db.update_user_role(user_id, role)
    user_info = await db.get_employee_info(user_id)
    log.info(
        f"–ú–µ–Ω–µ–¥–∂–µ—Ä {callback.from_user.id} –∏–∑–º–µ–Ω–∏–ª —Ä–æ–ª—å {user_info['full_name']} –Ω–∞ {role_name}."
    )
    await callback.message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_info['full_name']} —Ç–µ–ø–µ—Ä—å {role_name}."
    )


# –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞
@admin_router.callback_query(F.data.startswith("delete_employee_"))
async def delete_employee(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[-1])
    await db.delete_employee(user_id)
    user_info = await db.get_employee_info(user_id)
    await callback.message.answer(
        f"üóë –°–æ—Ç—Ä—É–¥–Ω–∏–∫ {user_info['full_name']} —É–¥–∞–ª—ë–Ω –∏–∑ —Å–∏—Å—Ç–µ–º—ã."
    )
