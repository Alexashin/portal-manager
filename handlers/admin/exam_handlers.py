import db
from aiogram import Router, F
from aiogram.types import CallbackQuery
from keyboards import (
    get_employee_keyboard,
    get_exam_attempts_keyboard,
    get_dangerous_accept_keyboard,
)
from create_bot import bot

admin_router = Router()


# –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ (–ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ)
@admin_router.callback_query(F.data.startswith("reject_exam_"))
async def reject_exam(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[-1])

    # –û—Ç–º–µ—á–∞–µ–º —Ç–æ–ª—å–∫–æ –ü–û–°–õ–ï–î–ù–Æ–Æ –ø–æ–ø—ã—Ç–∫—É –∫–∞–∫ "–Ω–µ –ø—Ä–æ–π–¥–µ–Ω–Ω—É—é"
    await db.reject_last_exam_attempt(user_id)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    new_text = callback.message.text + "\n\n‚ùå <b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞</b>."
    await callback.message.edit_text(new_text)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–µ—Ä–µ—Å–¥–∞—á–∏
    try:
        await bot.send_message(
            user_id,
            "‚ùå –í–∞—à–∞ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –Ω–µ –ø—Ä–∏–Ω—è—Ç–∞. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
        )
    except Exception:
        pass  # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É

    await callback.answer("–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞ ‚ùå", show_alert=True)


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ (–ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞)
@admin_router.callback_query(F.data.startswith("approve_exam_"))
async def approve_exam(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[-1])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await db.promote_to_employee(user_id)

    # –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ: —É–¥–∞–ª—è–µ–º –∫–Ω–æ–ø–∫–∏ –∏ –¥–æ–±–∞–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
    new_text = callback.message.text + "\n\n‚úÖ <b>–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –ø—Ä–∏–Ω—è—Ç–∞</b>."
    await callback.message.edit_text(new_text)

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏
    try:
        await bot.send_message(
            user_id,
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é –∏ —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º.",
            reply_markup=get_employee_keyboard(),
        )
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é

    await callback.answer("–ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞ ‚úÖ", show_alert=True)


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π
@admin_router.callback_query(F.data.startswith("view_exam_history_"))
async def view_exam_history(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[-1])
    attempts = await db.get_user_exam_attempts(user_id)

    if not attempts:
        await callback.message.answer("‚ùó –£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∏—Å—Ç–æ—Ä–∏–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π.")
        return
    user_info = await db.get_employee_info(user_id)
    response = (
        f"üìä <b>–ò—Å—Ç–æ—Ä–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info['full_name']}:</b>\n\n"
    )
    for attempt in attempts:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if attempt["passed"] else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù"
        response += (
            f"üìÖ {attempt['attempt_date'].strftime('%d.%m.%Y')}\n"
            f"üî¢ –ü–æ–ø—ã—Ç–∫–∞ #{attempt['attempt_number']}\n"
            f"‚úîÔ∏è {attempt['correct_answers']} –∏–∑ {attempt['total_questions']} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö\n"
            f"üìä –°—Ç–∞—Ç—É—Å: {status}\n\n"
        )

    await callback.message.answer(
        response, reply_markup=get_exam_attempts_keyboard(user_id, attempts)
    )
    await callback.answer()


# –ü—Ä–æ—Å–º–æ—Ç—Ä –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –ø–æ–ø—ã—Ç–∫–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
@admin_router.callback_query(F.data.startswith("view_exam_attempt_"))
async def view_exam_attempt(callback: CallbackQuery):
    parts = callback.data.split("_")
    user_id = int(parts[3])
    attempt_number = int(parts[4])

    answers = await db.get_exam_attempt_answers(user_id, attempt_number)

    if not answers:
        await callback.message.answer("‚ùó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –¥–∞–Ω–Ω–æ–π –ø–æ–ø—ã—Ç–∫–µ.")
        return

    user_info = await db.get_employee_info(user_id)

    response = f"üìã <b>–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_info['full_name']}, –ø–æ–ø—ã—Ç–∫–∞ #{attempt_number}:</b>\n\n"
    for answer in answers:
        response += f"‚ùì {answer['question']}\n"
        if answer["open_answer"]:
            response += f"üìù –û—Ç–∫—Ä—ã—Ç—ã–π –æ—Ç–≤–µ—Ç: {answer['open_answer']}\n\n"
        else:
            status = "‚úÖ" if answer["is_correct"] else "‚ùå"
            response += (
                f"üîò –í—ã–±—Ä–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç: {status} {answer['chosen_option_text']}\n\n"
            )

    await callback.message.answer(response)
    await callback.answer()


# –£–¥–∞–ª–µ–Ω–∏–µ —Ñ–∏–Ω–∞–ª—å–Ω–æ–π –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
@admin_router.callback_query(F.data == "delete_final_exam_questions")
async def confirm_delete_exam(callback: CallbackQuery):
    await callback.message.answer(
        "‚ùó –í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å—é —Ñ–∏–Ω–∞–ª—å–Ω—É—é –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é?",
        reply_markup=get_dangerous_accept_keyboard(action="delete_final_exam"),
    )
    await callback.answer()


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —É–¥–∞–ª–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
@admin_router.callback_query(F.data == "accept_delete_final_exam")
async def delete_test_exam(callback: CallbackQuery):
    # –£–¥–∞–ª—è–µ–º –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    await db.delete_all_final_exam_questions()

    await callback.message.answer("‚ùå –ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞.")
    await callback.answer()


# –û—Ç–º–µ–Ω–∞ —É–¥–∞–ª–µ–Ω–∏—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
@admin_router.callback_query(F.data == "cancel_delete_final_exam")
async def cancel_delete_test(callback: CallbackQuery):
    await callback.message.answer("–£–¥–∞–ª–µ–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
    await callback.answer()
