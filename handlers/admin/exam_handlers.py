from aiogram import Router, F
from aiogram.types import Message, CallbackQuery
from keyboards import *
import db
from create_bot import bot

admin_router = Router()


# –ü—Ä–æ—Å–º–æ—Ç—Ä —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
@admin_router.callback_query(F.data.startswith("view_exam_results_"))
async def view_exam_results(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[-1])
    results = await db.get_exam_results(user_id)

    if not results:
        await callback.message.answer(
            "‚ùó –ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è."
        )
        return

    correct_count = sum(1 for res in results if res["is_correct"])
    total_questions = len(results)
    accuracy = round((correct_count / total_questions) * 100, 2)

    response = f"üìä **–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:**\n\n"
    response += (
        f"‚úîÔ∏è –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_count} / {total_questions} ({accuracy}%)\n\n"
    )
    response += "üìã **–û—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:**\n"

    for idx, res in enumerate(results, 1):
        response += f"\n‚ùì {res['question']}\n"
        response += f"‚úÖ –ü—Ä–∞–≤–∏–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç: {res[f'option_{res['correct_option']}']}\n"
        response += (
            f"üîò –û—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {res[f'option_{res['selected_option']}']}\n"
        )

    await callback.message.answer(response)


# –û—Ç–∫–ª–æ–Ω–µ–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ (–ø–æ–≤—Ç–æ—Ä–Ω–æ–µ –æ–±—É—á–µ–Ω–∏–µ)
@admin_router.callback_query(F.data.startswith("reject_exam_"))
async def reject_exam(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[-1])

    # –£–¥–∞–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
    await db.reset_exam_attempt(user_id)

    await callback.message.answer(
        f"‚ùå –ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—Ç–∫–ª–æ–Ω–µ–Ω–∞. –°—Ç–∞–∂—ë—Ä—É –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ."
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –ø–æ–≤—Ç–æ—Ä–Ω–æ–≥–æ –æ–±—É—á–µ–Ω–∏—è
    try:
        await bot.send_message(
            user_id,
            "‚ùå –í–∞—à–∞ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –Ω–µ –ø—Ä–∏–Ω—è—Ç–∞. –í–∞–º –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–π—Ç–∏ –æ–±—É—á–µ–Ω–∏–µ –∑–∞–Ω–æ–≤–æ.",
        )
    except Exception:
        pass  # –ï—Å–ª–∏ –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É


# –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ (–ø–µ—Ä–µ–≤–æ–¥ –≤ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–∞)
@admin_router.callback_query(F.data.startswith("approve_exam_"))
async def approve_exam(callback: CallbackQuery):
    user_id = int(callback.data.split("_")[-1])

    # –û–±–Ω–æ–≤–ª—è–µ–º —Ä–æ–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    await db.promote_to_employee(user_id)

    await callback.message.answer(
        f"‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à—ë–ª –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é –∏ —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç—Å—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º."
    )

    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ –ø–æ–≤—ã—à–µ–Ω–∏–∏
    try:
        await bot.send_message(
            user_id,
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é –∏ —Ç–µ–ø–µ—Ä—å —è–≤–ª—è–µ—Ç–µ—Å—å —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º.",
        )
    except Exception:
        pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫—É –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
