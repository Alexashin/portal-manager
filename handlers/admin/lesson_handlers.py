import db
import logging
from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.context import FSMContext
from contexts import ModuleCreationFSM, ModuleEditFSM
from keyboards import (
    get_lessons_management_keyboard,
    get_lesson_management_keyboard,
    get_admin_keyboard,
    get_back_keyboard,
    get_add_new_lesson_keyboard_markup,
    get_dangerous_accept_keyboard,
)
from handlers.admin.main_handlers import is_back

admin_router = Router()

log = logging.getLogger(__name__)


# –ü–æ–∫–∞–∑ —É—Ä–æ–∫–æ–≤ –º–æ–¥—É–ª—è
@admin_router.callback_query(F.data.startswith("manage_lessons_"))
async def manage_lessons(callback: CallbackQuery):
    module_id = int(callback.data.split("_")[-1])
    lessons = await db.get_lessons_by_module(module_id)

    if not lessons:
        await callback.message.answer("‚ùó –í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤.")
        await callback.answer()
        return

    await callback.message.answer(
        "üìñ –£—Ä–æ–∫–∏ –º–æ–¥—É–ª—è:",
        reply_markup=get_lessons_management_keyboard(module_id, lessons),
    )
    await callback.answer()


# –ü–æ–∫–∞–∑ —É—Ä–æ–∫–æ–≤ –º–æ–¥—É–ª—è
@admin_router.callback_query(F.data.startswith("manage_lesson_"))
async def manage_lesson(callback: CallbackQuery):
    lesson_id = int(callback.data.split("_")[-1])
    await callback.message.answer(
        "üìñ –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=get_lesson_management_keyboard(lesson_id)
    )
    await callback.answer()


"""
_____________________________________–°–û–ó–î–ê–ù–ò–ï –£–†–û–ö–ê_________________________________________
"""


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞
@admin_router.callback_query(F.data == "add_lesson")
async def add_new_lesson(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞ üìñ:")
    await callback.answer()
    await state.set_state(ModuleCreationFSM.waiting_for_lesson_title)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞ –≤ –º–æ–¥—É–ª—å
@admin_router.callback_query(F.data.startswith("add_lesson_"))
async def add_lesson_to_module(callback: CallbackQuery, state: FSMContext):
    module_id = int(callback.data.split("_")[-1])
    await state.update_data(module_id=module_id)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ üìñ:", reply_markup=get_back_keyboard()
    )
    await callback.answer()
    await state.set_state(ModuleCreationFSM.waiting_for_lesson_title)


# –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞
@admin_router.message(ModuleCreationFSM.waiting_for_lesson_title)
async def get_lesson_title(message: Message, state: FSMContext):
    if await is_back(message, state):
        return
    await state.update_data(lesson_title=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ ‚úçÔ∏è:")
    await state.set_state(ModuleCreationFSM.waiting_for_lesson_text)


# –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —É—Ä–æ–∫–∞
@admin_router.message(ModuleCreationFSM.waiting_for_lesson_text)
async def get_lesson_text(message: Message, state: FSMContext):
    if await is_back(message, state):
        return
    await state.update_data(lesson_text=message.text)
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è —É—Ä–æ–∫–∞ üìé (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip):")
    await state.set_state(ModuleCreationFSM.waiting_for_lesson_files)


# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
@admin_router.message(ModuleCreationFSM.waiting_for_lesson_files, F.document)
async def get_lesson_files(message: Message, state: FSMContext):
    file_id = message.document.file_id
    data = await state.get_data()
    files = data.get("lesson_files", [])
    files.append(file_id)
    await state.update_data(lesson_files=files)
    await message.answer("–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω! –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip.")


# –ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
@admin_router.message(Command("skip"), ModuleCreationFSM.waiting_for_lesson_files)
async def skip_lesson_files(message: Message, state: FSMContext):
    await message.answer("–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ üé• (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip):")
    await state.set_state(ModuleCreationFSM.waiting_for_lesson_video)


# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
@admin_router.message(ModuleCreationFSM.waiting_for_lesson_video, F.video)
async def get_lesson_video(message: Message, state: FSMContext):
    video_id = message.video.file_id
    data = await state.get_data()
    videos = data.get("lesson_videos", [])
    videos.append(video_id)
    await state.update_data(lesson_videos=videos)
    await message.answer("–í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip.")


# –ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
@admin_router.message(Command("skip"), ModuleCreationFSM.waiting_for_lesson_video)
async def skip_lesson_video(message: Message, state: FSMContext):
    data = await state.get_data()
    module_id = data.get("module_id", "")
    if module_id != "":
        title = data.get("lesson_title")
        content = data.get("lesson_text")
        file_ids = data.get("lesson_files", [])
        video_ids = data.get("lesson_videos", [])
        await db.add_new_lesson_to_module(
            module_id, title, content, file_ids, video_ids
        )
        await message.answer("–£—Ä–æ–∫ –¥–æ–±–∞–≤–ª–µ–Ω!", reply_markup=get_admin_keyboard())
        await state.clear()
        return
    videos = data.get("lesson_videos", [])

    if videos != []:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞
        lesson = {
            "title": data.get("lesson_title"),
            "content": data.get("lesson_text"),
            "files": data.get("lesson_files", []),
            "videos": videos,
        }
    else:
        lesson = {
            "title": data.get("lesson_title"),
            "content": data.get("lesson_text"),
            "files": data.get("lesson_files", []),
            "videos": [],
        }

    lessons = data.get("lessons", [])
    lessons.append(lesson)
    await state.update_data(
        lessons=lessons,
        lesson_title="",
        lesson_text="",
        lesson_files=[],
        lesson_videos=[],
    )
    await message.answer(
        "–û—Ç–ª–∏—á–Ω–æ! –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —É—Ä–æ–∫ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –º–æ–¥—É–ª—å?",
        reply_markup=get_add_new_lesson_keyboard_markup(),
    )
    await state.set_state(ModuleCreationFSM.waiting_for_next_action)


"""
_____________________________________–ü–†–û–°–ú–û–¢–† –£–†–û–ö–ê_____________________________________
"""


@admin_router.callback_query(F.data.startswith("view_lesson_"))
async def view_lesson_content(callback: CallbackQuery):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —É—Ä–æ–∫–∞ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–æ–º.
    """
    lesson_id = int(callback.data.split("_")[-1])
    user_id = callback.from_user.id

    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ —É—Ä–æ–∫–∞
    lesson = await db.get_lesson_by_id(lesson_id)
    if not lesson:
        await callback.message.answer("‚ùó –£—Ä–æ–∫ –Ω–µ –Ω–∞–π–¥–µ–Ω.")
        await callback.answer()
        return

    # –õ–æ–≥–∏—Ä—É–µ–º –¥–µ–π—Å—Ç–≤–∏–µ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä–∞
    log.info(f"–ú–æ–¥–µ—Ä–∞—Ç–æ—Ä {user_id} –ø–æ—Å–º–æ—Ç—Ä–µ–ª —É—Ä–æ–∫ {lesson_id}.")

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
    text = f"üìñ <b>{lesson['title']}</b>\n\n{lesson['content']}\n\n"

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∞–π–ª—ã –∏ –≤–∏–¥–µ–æ
    if lesson.get("file_ids"):
        text += "üìé –í —ç—Ç–æ–º —É—Ä–æ–∫–µ –µ—Å—Ç—å –ø—Ä–∏–∫—Ä–µ–ø–ª–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã.\n"
    if lesson.get("video_ids"):
        text += "üé• –í —ç—Ç–æ–º —É—Ä–æ–∫–µ –µ—Å—Ç—å –≤–∏–¥–µ–æ.\n"

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—É
    await callback.message.answer(text, parse_mode="HTML")

    # –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∞–π–ª—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö –æ—Ç–¥–µ–ª—å–Ω–æ
    for file_id in lesson.get("file_ids", []):
        try:
            await callback.message.answer_document(file_id)
        except Exception as ex:
            log.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞! –£—Ä–æ–∫ id #{lesson_id}: {ex}")
            await callback.message.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞!")
    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤–∏–¥–µ–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –æ—Ç–¥–µ–ª—å–Ω–æ
    for video_id in lesson.get("video_ids", []):
        try:
            await callback.message.answer_video(video_id)
        except Exception as ex:
            log.error(f"–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ! –£—Ä–æ–∫ id #{lesson_id}: {ex}")
            await callback.message.answer("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤–∏–¥–µ–æ!")
    await callback.answer()


"""
_____________________________________–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –£–†–û–ö–ê_________________________________________
"""


# –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞
@admin_router.callback_query(F.data.startswith("edit_lesson_"))
async def edit_lesson(callback: CallbackQuery, state: FSMContext):
    lesson_id = int(callback.data.split("_")[-1])
    await state.update_data(lesson_edit_id=lesson_id)
    await callback.message.answer(
        "–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞:", reply_markup=get_back_keyboard()
    )
    await state.set_state(ModuleEditFSM.waiting_for_edit_lesson_title)
    await callback.answer()


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞
@admin_router.message(ModuleEditFSM.waiting_for_edit_lesson_title, F.text)
async def edit_lesson_title(message: Message, state: FSMContext):
    if await is_back(message, state):
        return
    if message.text.strip().lower() == "/skip":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip):")
    else:
        await state.update_data(new_lesson_title=message.text.strip())
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞:")
    await state.set_state(ModuleEditFSM.waiting_for_edit_lesson_text)


# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —É—Ä–æ–∫–∞
@admin_router.message(ModuleEditFSM.waiting_for_edit_lesson_text, F.text)
async def edit_lesson_text(message: Message, state: FSMContext):
    if await is_back(message, state):
        return
    if message.text.strip().lower() == "/skip":
        await message.answer(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —É—Ä–æ–∫–∞ üìé (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):"
        )
    else:
        await state.update_data(new_lesson_text=message.text.strip())
        await message.answer(
            "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —É—Ä–æ–∫–∞ üìé (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):"
        )
    await state.set_state(ModuleEditFSM.waiting_for_edit_lesson_files)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
@admin_router.message(ModuleEditFSM.waiting_for_edit_lesson_files, F.document)
async def edit_lesson_files(message: Message, state: FSMContext):
    file_id = message.document.file_id
    data = await state.get_data()
    new_files = data.get("new_lesson_files", [])
    new_files.append(file_id)
    await state.update_data(new_lesson_files=new_files)
    await message.answer(
        "–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω! –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è"
    )


# –ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
@admin_router.message(Command("skip"), ModuleEditFSM.waiting_for_edit_lesson_files)
async def skip_files(message: Message, state: FSMContext):
    await message.answer(
        "–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ üé• (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):"
    )
    await state.set_state(ModuleEditFSM.waiting_for_edit_lesson_video)


# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ
@admin_router.message(ModuleEditFSM.waiting_for_edit_lesson_video, F.video)
async def edit_lesson_videos(message: Message, state: FSMContext):
    video_id = message.video.file_id
    data = await state.get_data()
    new_videos = data.get("new_lesson_videos", [])
    new_videos.append(video_id)
    await state.update_data(new_lesson_videos=new_videos)
    await message.answer(
        "–í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è"
    )


# –ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ
@admin_router.message(Command("skip"), ModuleEditFSM.waiting_for_edit_lesson_video)
async def skip_videos(message: Message, state: FSMContext):
    await save_edited_lesson(message, state)


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def save_edited_lesson(message: Message, state: FSMContext):
    data = await state.get_data()
    await db.update_lesson(
        lesson_id=data.get("lesson_edit_id"),
        new_title=data.get("new_lesson_title", ""),
        new_content=data.get("new_lesson_text", ""),
        new_file_ids=data.get("new_lesson_files", []),
        new_video_ids=data.get("new_lesson_videos", []),
    )
    await message.answer("‚úÖ –£—Ä–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=get_admin_keyboard())
    await state.clear()


@admin_router.callback_query(F.data.startswith("delete_lesson_"))
async def confirm_delete_lesson(callback: CallbackQuery):
    await callback.message.answer(
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —É—Ä–æ–∫?",
        reply_markup=get_dangerous_accept_keyboard(callback.data),
    )
    await callback.answer()


@admin_router.callback_query(F.data.startswith("accept_delete_lesson_"))
async def delete_lesson(callback: CallbackQuery):
    lesson_id = int(callback.data.split("_")[-1])
    await db.delete_lesson(lesson_id)
    log.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.message.from_user.id} —É–¥–∞–ª–∏–ª —É—Ä–æ–∫ #{lesson_id}")
    await callback.message.answer("üóë –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    await callback.answer()


# –£–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞
@admin_router.callback_query(F.data.startswith("cancel_delete_lesson_"))
async def delete_selected_lesson(callback: CallbackQuery):
    await callback.message.answer("üóë –û—Ç–º–µ–Ω–∞.")
    await callback.answer()
