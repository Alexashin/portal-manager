from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext
from filters import RoleFilter
from contexts import ModuleCreation, ModuleEdit
from keyboards import *
import db

admin_router = Router()

"""
_____________________________________–û–°–ù–û–í–ù–´–ï –•–ï–ù–î–õ–ï–†–´_________________________________________
"""

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥"
@admin_router.message(RoleFilter("manager"), F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer("–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_admin_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏–µ–º"
@admin_router.message(RoleFilter("manager"), F.text == "üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –æ–±—É—á–µ–Ω–∏–µ–º")
async def manage_training(message: Message):
    await message.answer("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_training_management_inline_keyboard())

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏"
@admin_router.message(RoleFilter("manager"), F.text == "üë• –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏")
async def view_users(message: Message):
    await message.answer("üìã –°–ø–∏—Å–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –±—É–¥–µ—Ç –∑–¥–µ—Å—å.")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞"
@admin_router.message(RoleFilter("manager"), F.text == "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
async def view_statistics(message: Message):
    await message.answer("üìà –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –±—É–¥–µ—Ç –∑–¥–µ—Å—å.")

# –ü–æ–∫–∞–∑ —Å–ø–∏—Å–∫–∞ –º–æ–¥—É–ª–µ–π
@admin_router.callback_query(RoleFilter("manager"), F.data == "list_modules")
async def show_modules(callback: CallbackQuery):
    modules = await db.get_all_modules()
    if not modules:
        await callback.message.answer("‚ùó –ú–æ–¥—É–ª–∏ –ø–æ–∫–∞ –Ω–µ —Å–æ–∑–¥–∞–Ω—ã.")
        await callback.answer()
        return
    await callback.message.answer("üìö –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π:", reply_markup=get_modules_admin_keyboard(modules))
    await callback.answer()

# –ü—Ä–æ—Å–º–æ—Ç—Ä –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è
@admin_router.callback_query(F.data.startswith("admin_view_module_"))
async def view_module(callback: CallbackQuery):
    module_id = int(callback.data.split("_")[-1])
    await callback.message.answer(f"üìö –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –º–æ–¥—É–ª–µ–º #{module_id}", reply_markup=get_module_management_keyboard(module_id))
    await callback.answer()

# –ü–æ–∫–∞–∑ —É—Ä–æ–∫–æ–≤ –º–æ–¥—É–ª—è
@admin_router.callback_query(F.data.startswith("manage_lessons_"))
async def manage_lessons(callback: CallbackQuery):
    module_id = int(callback.data.split("_")[-1])
    lessons = await db.get_lessons_by_module(module_id)

    if not lessons:
        await callback.message.answer("‚ùó –í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤.")
        await callback.answer()
        return

    await callback.message.answer("üìñ –£—Ä–æ–∫–∏ –º–æ–¥—É–ª—è:", reply_markup=get_lessons_management_keyboard(module_id, lessons))
    await callback.answer()


# –ü–æ–∫–∞–∑ —É—Ä–æ–∫–æ–≤ –º–æ–¥—É–ª—è
@admin_router.callback_query(F.data.startswith("view_lesson_"))
async def manage_lesson(callback: CallbackQuery):
    lesson_id = int(callback.data.split("_")[-1])
    await callback.message.answer("üìñ –í—ã–±–æ—Ä –¥–µ–π—Å—Ç–≤–∏—è:", reply_markup=get_lesson_management_keyboard(lesson_id))
    await callback.answer()

"""
_____________________________________–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –ú–û–î–£–õ–Ø_________________________________________
"""

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∏ –æ–ø–∏—Å–∞–Ω–∏—è –º–æ–¥—É–ª—è
@admin_router.callback_query(F.data.startswith("edit_module_title_and_desc_"))
async def edit_module(callback: CallbackQuery, state: FSMContext):
    module_id = int(callback.data.split("_")[-1])
    await state.update_data(module_id=module_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip):", reply_markup=get_back_keyboard())
    await callback.answer()
    await state.set_state(ModuleEdit.waiting_for_edit_module_title)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏—è
@admin_router.message(ModuleEdit.waiting_for_edit_module_title)
async def save_edited_module(message: Message, state: FSMContext):
    if message.text != "/skip":
        await state.update_data(new_title=message.text)
    await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip):")
    await state.set_state(ModuleEdit.waiting_for_edit_module_description)

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–æ–≤–æ–≥–æ –æ–ø–∏—Å–∞–Ω–∏—è
@admin_router.message(ModuleEdit.waiting_for_edit_module_description)
async def save_edited_module(message: Message, state: FSMContext):
    if message.text == "/skip":
        new_description = ''
    new_description = message.text if message.text != "/skip" else ''
    data = await state.get_data()
    module_id = data.get("module_id")
    new_title = data.get("new_title", '')
    
    await db.update_module(module_id, new_title, new_description)
    await message.answer(f"‚úèÔ∏è –ú–æ–¥—É–ª—å –æ–±–Ω–æ–≤–ª—ë–Ω!", reply_markup=get_admin_keyboard())
    await state.clear()

# –£–¥–∞–ª–µ–Ω–∏–µ –º–æ–¥—É–ª—è
@admin_router.callback_query(F.data.startswith("delete_module_"))
async def delete_selected_module(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–£–¥–∞–ª–∏—Ç—å –º–æ–¥—É–ª—å –∏ –æ—Ç–Ω–æ—Å—è—â–∏–µ—Å—è –∫ –Ω–µ–º—É —É—Ä–æ–∫–∏?", reply_markup=get_dangerous_accept_keyboard(callback.data))
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è –æ–± —É–¥–∞–ª–µ–Ω–∏–∏ –º–æ–¥—É–ª—è
@admin_router.callback_query(F.data.startswith("accept_delete_module_"))
async def accept_module_deleting(callback: CallbackQuery):
    module_id = int(callback.data.split("_")[-1])
    await db.delete_module(module_id)
    await callback.message.answer("üóë –ú–æ–¥—É–ª—å —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    await callback.answer()
    modules = await db.get_all_modules()
    if not modules:
        await callback.message.answer("‚ùó –ú–æ–¥—É–ª–µ–π –±–æ–ª—å—à–µ –Ω–µ—Ç.")
        return
    await callback.message.answer("üìö –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π:", reply_markup=get_modules_admin_keyboard(modules))

@admin_router.callback_query(F.data.startswith("cancel_delete_module_"))
async def cancel_module_deleting(callback: CallbackQuery):
    modules = await db.get_all_modules()
    await callback.message.answer("üìö –°–ø–∏—Å–æ–∫ –º–æ–¥—É–ª–µ–π:", reply_markup=get_modules_admin_keyboard(modules))
    await callback.answer()

"""
_____________________________________–°–û–ó–î–ê–ù–ò–ï –ú–û–î–£–õ–Ø_________________________________________
"""

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "‚ûï –°–æ–∑–¥–∞—Ç—å –Ω–æ–≤—ã–π –º–æ–¥—É–ª—å"
@admin_router.callback_query(F.data == "create_new_module")
async def create_module(callback: CallbackQuery, state: FSMContext):
    await state.clear()
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –º–æ–¥—É–ª—è üìö:", reply_markup=get_back_keyboard())
    await callback.answer()
    await state.set_state(ModuleCreation.waiting_for_module_title)

# –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è –º–æ–¥—É–ª—è
@admin_router.message(ModuleCreation.waiting_for_module_title)
async def get_module_title(message: Message, state: FSMContext):
    await state.update_data(module_title=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –º–æ–¥—É–ª—è üìù:")
    await state.set_state(ModuleCreation.waiting_for_module_description)

# –í–≤–æ–¥ –æ–ø–∏—Å–∞–Ω–∏—è –º–æ–¥—É–ª—è
@admin_router.message(ModuleCreation.waiting_for_module_description)
async def get_module_description(message: Message, state: FSMContext):
    await state.update_data(module_description=message.text)
    await message.answer("–î–æ–±–∞–≤–∏–º –ø–µ—Ä–≤—ã–π —É—Ä–æ–∫! –í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞ üìñ:")
    await state.set_state(ModuleCreation.waiting_for_lesson_title)

"""
_____________________________________–°–û–ó–î–ê–ù–ò–ï –£–†–û–ö–ê_________________________________________
"""

# –í–≤–æ–¥ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞
@admin_router.message(ModuleCreation.waiting_for_lesson_title)
async def get_lesson_title(message: Message, state: FSMContext):
    await state.update_data(lesson_title=message.text)
    await message.answer("–¢–µ–ø–µ—Ä—å –≤–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç –¥–ª—è —ç—Ç–æ–≥–æ —É—Ä–æ–∫–∞ ‚úçÔ∏è:")
    await state.set_state(ModuleCreation.waiting_for_lesson_text)

# –í–≤–æ–¥ —Ç–µ–∫—Å—Ç–∞ —É—Ä–æ–∫–∞
@admin_router.message(ModuleCreation.waiting_for_lesson_text)
async def get_lesson_text(message: Message, state: FSMContext):
    await state.update_data(lesson_text=message.text)
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–∞–π–ª—ã –¥–ª—è —É—Ä–æ–∫–∞ üìé (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip):")
    await state.set_state(ModuleCreation.waiting_for_lesson_files)

# –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–æ–≤
@admin_router.message(ModuleCreation.waiting_for_lesson_files, F.document)
async def get_lesson_files(message: Message, state: FSMContext):
    file_id = message.document.file_id
    data = await state.get_data()
    files = data.get("lesson_files", [])
    files.append(file_id)
    await state.update_data(lesson_files=files)
    await message.answer("–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω! –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip.")

# –ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
@admin_router.message(Command("skip"), ModuleCreation.waiting_for_lesson_files)
async def skip_lesson_files(message: Message, state: FSMContext):
    await message.answer("–¢–µ–ø–µ—Ä—å –∑–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ üé• (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip):")
    await state.set_state(ModuleCreation.waiting_for_lesson_video)

# –ó–∞–≥—Ä—É–∑–∫–∞ –≤–∏–¥–µ–æ
@admin_router.message(ModuleCreation.waiting_for_lesson_video, F.video)
async def get_lesson_files(message: Message, state: FSMContext):
    video_id = message.video.file_id
    data = await state.get_data()
    videos = data.get("lesson_videos", [])
    videos.append(video_id)
    await state.update_data(lesson_videos=videos)
    await message.answer("–í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip.")
    
# –ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
@admin_router.message(Command("skip"), ModuleCreation.waiting_for_lesson_video)
async def get_lesson_video(message: Message, state: FSMContext):
    data = await state.get_data()

    videos = data.get("lesson_videos", [])
    
    if videos != []:
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞
        lesson = {
            "title": data.get("lesson_title"),
            "content": data.get("lesson_text"),
            "files": data.get("lesson_files", []),
            "videos": videos
        }
    else:
        lesson = {
        "title": data.get("lesson_title"),
        "content": data.get("lesson_text"),
        "files": data.get("lesson_files", []),
        "videos": []
        }

    lessons = data.get("lessons", [])
    lessons.append(lesson)
    await state.update_data(lessons=lessons)

    await message.answer("–û—Ç–ª–∏—á–Ω–æ! –î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —É—Ä–æ–∫ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –º–æ–¥—É–ª—å?",
                         reply_markup=get_add_new_lesson_keyboard_markup())
    await state.set_state(ModuleCreation.waiting_for_next_action)

# –ü—Ä–æ–ø—É—Å–∫ –∑–∞–≥—Ä—É–∑–∫–∏ –≤–∏–¥–µ–æ
@admin_router.message(Command("skip"), ModuleCreation.waiting_for_lesson_video)
async def skip_lesson_video(message: Message, state: FSMContext):
    data = await state.get_data()

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ —É—Ä–æ–∫–∞ –±–µ–∑ –≤–∏–¥–µ–æ
    lesson = {
        "title": data.get("lesson_title"),
        "content": data.get("lesson_text"),
        "files": data.get("lesson_files", []),
        "videos": []
    }

    lessons = data.get("lessons", [])
    lessons.append(lesson)
    await state.update_data(lessons=lessons)

    await message.answer("–î–æ–±–∞–≤–∏—Ç—å –µ—â—ë —É—Ä–æ–∫ –∏–ª–∏ –∑–∞–≤–µ—Ä—à–∏—Ç—å –º–æ–¥—É–ª—å?",
                         reply_markup=get_add_new_lesson_keyboard_markup())
    await state.set_state(ModuleCreation.waiting_for_next_action)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–≥–æ —É—Ä–æ–∫–∞
@admin_router.callback_query(F.data == "add_lesson")
async def add_new_lesson(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —Å–ª–µ–¥—É—é—â–µ–≥–æ —É—Ä–æ–∫–∞ üìñ:")
    await callback.answer()
    await state.set_state(ModuleCreation.waiting_for_lesson_title)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–æ–¥—É–ª—è
@admin_router.callback_query(F.data == "finish_module", ModuleCreation.waiting_for_next_action)
async def finish_module(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()

    # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –º–æ–¥—É–ª—è
    module_title = data.get("module_title")
    module_description = data.get("module_description")
    lessons = data.get("lessons", [])

    if not module_title or not lessons:
        await callback.message.answer("‚ùó –ú–æ–¥—É–ª—å –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Å–æ–∑–¥–∞–Ω –±–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –∏–ª–∏ —É—Ä–æ–∫–æ–≤.")
        await callback.answer()
        return

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –º–æ–¥—É–ª—è –≤ –ë–î
    module_id = await db.create_module(module_title, module_description)

    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —É—Ä–æ–∫–æ–≤ –≤ –ë–î
    for order, lesson in enumerate(lessons, start=1):
        lesson_title = lesson.get("title")
        lesson_content = lesson.get("content")
        lesson_files = lesson.get("files", [])
        lesson_videos = lesson.get("videos", [])

        await db.add_lesson(
            module_id=module_id,
            title=lesson_title,
            content=lesson_content,
            file_ids=lesson_files,
            video_ids=lesson_videos,
            order=order
        )

    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ–± —É—Å–ø–µ—à–Ω–æ–º —Å–æ–∑–¥–∞–Ω–∏–∏
    await callback.message.answer(f"üìö –ú–æ–¥—É–ª—å '{module_title}' —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω!", reply_markup=get_admin_keyboard())
    await callback.answer()
    await state.clear() 

"""
_____________________________________–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ò–ï –£–†–û–ö–ê_________________________________________
"""

# –ù–∞—á–∞–ª–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞
@admin_router.callback_query(F.data.startswith("edit_lesson_"))
async def edit_lesson(callback: CallbackQuery, state: FSMContext):
    lesson_id = int(callback.data.split("_")[-1])
    await state.update_data(lesson_edit_id=lesson_id)
    await callback.message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Ä–æ–∫–∞:", reply_markup=get_back_keyboard())
    await state.set_state(ModuleEdit.waiting_for_edit_lesson_title)
    await callback.answer()

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è —É—Ä–æ–∫–∞
@admin_router.message(ModuleEdit.waiting_for_edit_lesson_title, F.text)
async def edit_lesson_title(message: Message, state: FSMContext):
    if message.text.strip().lower() == "/skip":
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞ (–∏–ª–∏ –Ω–∞–∂–º–∏—Ç–µ /skip):")
    else:
        await state.update_data(new_lesson_title=message.text.strip())
        await message.answer("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—ã–π —Ç–µ–∫—Å—Ç —É—Ä–æ–∫–∞:")
    await state.set_state(ModuleEdit.waiting_for_edit_lesson_text)

# –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —É—Ä–æ–∫–∞
@admin_router.message(ModuleEdit.waiting_for_edit_lesson_text, F.text)
async def edit_lesson_text(message: Message, state: FSMContext):
    if message.text.strip().lower() == "/skip":
        await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —É—Ä–æ–∫–∞ üìé (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):")
    else:
        await state.update_data(new_lesson_text=message.text.strip())
        await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –Ω–æ–≤—ã–µ —Ñ–∞–π–ª—ã –¥–ª—è —É—Ä–æ–∫–∞ üìé (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):")
    await state.set_state(ModuleEdit.waiting_for_edit_lesson_files)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
@admin_router.message(ModuleEdit.waiting_for_edit_lesson_files, F.document)
async def edit_lesson_files(message: Message, state: FSMContext):
    file_id = message.document.file_id
    data = await state.get_data()
    new_files = data.get("new_lesson_files", [])
    new_files.append(file_id)
    await state.update_data(new_lesson_files=new_files)
    await message.answer("–§–∞–π–ª –¥–æ–±–∞–≤–ª–µ–Ω! –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip –¥–ª—è –ø—Ä–æ–¥–æ–ª–∂–µ–Ω–∏—è")

# –ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–∞–π–ª–æ–≤
@admin_router.message(Command("skip"), ModuleEdit.waiting_for_edit_lesson_files)
async def skip_files(message: Message, state: FSMContext):
    await message.answer("–ó–∞–≥—Ä—É–∑–∏—Ç–µ –æ–±—É—á–∞—é—â–µ–µ –≤–∏–¥–µ–æ üé• (–∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è):")
    await state.set_state(ModuleEdit.waiting_for_edit_lesson_video)

# –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤–∏–¥–µ–æ
@admin_router.message(ModuleEdit.waiting_for_edit_lesson_video, F.video)
async def edit_lesson_videos(message: Message, state: FSMContext):
    video_id = message.video.file_id
    data = await state.get_data()
    new_videos = data.get("new_lesson_videos", [])
    new_videos.append(video_id)
    await state.update_data(new_lesson_videos=new_videos)
    await message.answer("–í–∏–¥–µ–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ! –ó–∞–≥—Ä—É–∂–∞–π—Ç–µ –µ—â—ë –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ /skip –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è")

# –ü—Ä–æ–ø—É—Å–∫ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤–∏–¥–µ–æ
@admin_router.message(Command("skip"), ModuleEdit.waiting_for_edit_lesson_video)
async def skip_videos(message: Message, state: FSMContext):
    await save_edited_lesson(message, state)

# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async def save_edited_lesson(message: Message, state: FSMContext):
    data = await state.get_data()
    await db.update_lesson(
        lesson_id=data.get('lesson_edit_id'),
        new_title=data.get('new_lesson_title', ''),
        new_content=data.get('new_lesson_text', ''),
        new_file_ids=data.get('new_lesson_files', []),
        new_video_ids=data.get('new_lesson_videos', [])
    )
    await message.answer("‚úÖ –£—Ä–æ–∫ –æ–±–Ω–æ–≤–ª—ë–Ω.", reply_markup=get_admin_keyboard())
    await state.clear()


@admin_router.callback_query(F.data.startswith("delete_lesson_"))
async def confirm_delete_lesson(callback: CallbackQuery):
    await callback.message.answer("–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å —ç—Ç–æ—Ç —É—Ä–æ–∫?", reply_markup=get_dangerous_accept_keyboard(callback.data))
    await callback.answer()

@admin_router.callback_query(F.data.startswith('accept_delete_lesson_'))
async def delete_lesson(callback: CallbackQuery):
    lesson_id = int(callback.data.split("_")[-1])
    await db.delete_lesson(lesson_id)
    await callback.message.answer("üóë –£—Ä–æ–∫ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª—ë–Ω.")
    await callback.answer()

# –£–¥–∞–ª–µ–Ω–∏–µ —É—Ä–æ–∫–∞
@admin_router.callback_query(F.data.startswith("cancel_delete_lesson_"))
async def delete_selected_lesson(callback: CallbackQuery):
    await callback.message.answer("üóë –û—Ç–º–µ–Ω–∞.")
    await callback.answer()
