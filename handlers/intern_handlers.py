from aiogram_run import bot
from aiogram import Router, F
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardButton,
    InlineKeyboardMarkup,
)
from aiogram.fsm.context import FSMContext
from filters import RoleFilter
import db
from keyboards import get_back_keyboard, get_intern_keyboard

intern_router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥"
@intern_router.message(RoleFilter("intern"), F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_intern_keyboard()
    )


# –ü–æ–∫–∞–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –¥–ª—è —Å—Ç–∞–∂—ë—Ä–∞
@intern_router.message(RoleFilter("intern"), F.text == "üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏")
async def show_modules(message: Message):
    user_id = message.from_user.id
    modules = await db.get_available_modules_for_user(user_id)

    if not modules:
        await message.answer("üìö –ü–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π.")
        return

    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=module["title"], callback_data=f"open_module_{module['id']}"
                )
            ]
            for module in modules
        ]
    )
    await message.answer("–ú–æ–¥—É–ª–∏ –¥–ª—è –æ–±—É—á–µ–Ω–∏—è:", reply_markup=keyboard)


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
@intern_router.message(RoleFilter("intern"), F.text == "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def show_progress(message: Message):
    user_id = message.from_user.id
    progress = await db.get_user_progress(user_id)

    if not progress:
        await message.answer("üîñ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π.")
        return

    response = "üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:\n"
    for module in progress:
        response += f"‚úîÔ∏è {module['title']} (–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {module['completed_at']})\n"

    await message.answer(response)


# –û—Ç–∫—Ä—ã—Ç–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è
@intern_router.callback_query(F.data.startswith("open_module_"))
async def open_module(callback: CallbackQuery, state: FSMContext):
    module_id = int(callback.data.split("_")[-1])
    lessons = await db.get_lessons_by_module(module_id)

    if not lessons:
        await callback.message.answer("‚ùó –í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤.")
        return
    await state.update_data(module_id=module_id, lesson_index=0)
    await callback.message.answer("–ù–∞—á–∞—Ç–æ –æ–±—É—á–µ–Ω–∏–µ!", reply_markup=get_back_keyboard())
    data = await state.get_data()
    temporary_msgs = data.get("temporary_msgs", [])
    if temporary_msgs != []:
        for msg_id in temporary_msgs:
            await bot.delete_message(chat_id=callback.from_user.id, message_id=msg_id)
        await state.update_data(temporary_msgs=[])
    await send_lesson(callback.message, state, 0, module_id)


@intern_router.callback_query(F.data.startswith("open_lesson_"))
async def change_lesson(callback: CallbackQuery, state: FSMContext):
    lesson_id = int(callback.data.split("_")[-1])
    module_id = int(callback.data.split("_")[-2])
    data = await state.get_data()
    temporary_msgs = data.get("temporary_msgs", [])
    if temporary_msgs != []:
        for msg_id in temporary_msgs:
            await bot.delete_message(chat_id=callback.from_user.id, message_id=msg_id)
        await state.update_data(temporary_msgs=[])
    await send_lesson(callback.message, state, lesson_id, module_id)


# –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ä–æ–∫–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
async def send_lesson(message: Message, state: FSMContext, index, module_id):
    lessons = await db.get_lessons_by_module(module_id)
    lesson = lessons[index]
    total_lessons = len(lessons)

    text = f"<b>{lesson['title']}</b>\n–§–∞–π–ª—ã —É—Ä–æ–∫–∞:"

    buttons = []
    if index > 0:
        buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"open_lesson_{module_id}_{index - 1}"
            )
        )
    if index < total_lessons - 1:
        buttons.append(
            InlineKeyboardButton(
                text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"open_lesson_{module_id}_{index + 1}"
            )
        )
    buttons.append(
        InlineKeyboardButton(
            text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"finish_module_{module_id}"
        )
    )

    data = await state.get_data()
    new_temporary_msgs = data.get("temporary_msgs", [])

    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
    msg = await message.answer(text)
    new_temporary_msgs.append(msg.message_id)
    for file_id in lesson.get("file_ids", []):
        msg = await message.answer_document(file_id)
        new_temporary_msgs.append(msg.message_id)

    for video_id in lesson.get("video_ids", []):
        msg = await message.answer_video(video_id)
        new_temporary_msgs.append(msg.message_id)
    msg = await message.answer(f"{lesson['content']}")
    new_temporary_msgs.append(msg.message_id)
    msg = await message.answer("<b>–ü—Ä–æ–¥–æ–ª–∂–∏–º?</b>", reply_markup=keyboard)
    new_temporary_msgs.append(msg.message_id)
    await state.update_data(temporary_msgs=new_temporary_msgs)


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–æ–¥—É–ª—è
@intern_router.callback_query(F.data.startswith("finish_module_"))
async def finish_module(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    temporary_msgs = data.get("temporary_msgs", [])
    for msg_id in temporary_msgs:
        await bot.delete_message(chat_id=callback.from_user.id, message_id=msg_id)

    module_id = int(callback.data.split("_")[-1])

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞ –∏–∑ –ë–î
    questions = await db.get_test_questions(module_id)

    if not questions:
        # TODO: –°–ß–ò–¢–ê–ï–ú –ú–û–î–£–õ–¨ –ü–†–û–ô–î–ï–ù–ù–´–ú
        await callback.message.answer(
            "‚ùó –î–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è —Ç–µ—Å—Ç –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.",
            reply_markup=get_intern_keyboard(),
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ FSM
    await state.update_data(
        module_id=module_id,
        questions=questions,
        current_question_index=0,
        correct_answers=0,
    )
    await send_next_question(callback.message, state)


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
async def send_next_question(message: Message, state: FSMContext):
    data = await state.get_data()
    questions = data.get("questions", [])
    current_index = data.get("current_question_index", 0)

    if current_index >= len(questions):
        await finish_test(message, state)
        return

    question = questions[current_index]
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=question[f"option_{i}"], callback_data=f"answer_{i}"
                )
            ]
            for i in range(1, 5)
        ]
    )

    await message.answer(f"‚ùì {question['question']}", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
@intern_router.callback_query(F.data.startswith("answer_"))
async def handle_answer(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    questions = data.get("questions", [])
    current_index = data.get("current_question_index", 0)
    correct_answers = data.get("correct_answers", 0)

    question = questions[current_index]
    selected_option = int(callback.data.split("_")[-1])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    if selected_option == question["correct_option"]:
        correct_answers += 1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ FSM
    await state.update_data(
        current_question_index=current_index + 1, correct_answers=correct_answers
    )

    await send_next_question(callback.message, state)


async def finish_test(message: Message, state: FSMContext):
    data = await state.get_data()
    module_id = data.get("module_id")
    correct_answers = data.get("correct_answers", 0)
    total_questions = len(data.get("questions", []))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    if (
        correct_answers / total_questions >= 0.7
    ):  # –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ: 70% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        await db.update_module_progress(
            user_id=message.from_user.id, module_id=module_id, is_completed=True
        )
        await message.answer(
            f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç –º–æ–¥—É–ª—è! –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers} –∏–∑ {total_questions}.",
            reply_markup=get_intern_keyboard(),
        )
    else:
        await message.answer(
            f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω. –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers} –∏–∑ {total_questions}. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å.",
            reply_markup=get_intern_keyboard(),
        )

    await state.clear()
