from aiogram_run import bot
from aiogram import Router, F
from aiogram.types import Message, CallbackQuery, ReplyKeyboardRemove
from aiogram.fsm.context import FSMContext
from contexts import FinalExamFSM
from filters import RoleFilter
import db
from keyboards import *

intern_router = Router()


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "üîô –ù–∞–∑–∞–¥"
@intern_router.message(RoleFilter("intern"), F.text == "üîô –ù–∞–∑–∞–¥")
async def back_to_main_menu(message: Message, state: FSMContext):
    await state.clear()
    await message.answer(
        "–í—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.", reply_markup=get_intern_keyboard()
    )


@intern_router.message(RoleFilter("intern"), F.text == "üìñ –î–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏")
async def show_modules(message: Message):
    user_id = message.from_user.id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏
    modules = await db.get_available_modules_for_user(user_id)

    # –ï—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –Ω–µ—Ç, –æ—Ç–∫—Ä—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –º–æ–¥—É–ª—å
    if not modules:
        first_module = await db.get_first_module()
        if first_module:
            await db.make_module_accessible(user_id, first_module["id"])
            modules = [first_module]

    if not modules:
        await message.answer("‚ùó –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –º–æ–¥—É–ª–µ–π.")
        return

    await message.answer(
        "üìö –í–∞—à–∏ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –º–æ–¥—É–ª–∏:", reply_markup=get_avaible_modules_keyboard(modules)
    )


# –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
@intern_router.message(RoleFilter("intern"), F.text == "üìä –ú–æ–π –ø—Ä–æ–≥—Ä–µ—Å—Å")
async def show_progress(message: Message):
    user_id = message.from_user.id
    progress = await db.get_user_progress(user_id)

    if not progress:
        await message.answer("üîñ –£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∑–∞–≤–µ—Ä—à—ë–Ω–Ω—ã—Ö –º–æ–¥—É–ª–µ–π.")
        return

    response = "üìä –í–∞—à –ø—Ä–æ–≥—Ä–µ—Å—Å:\n"
    for module in progress:
        response += f"‚úîÔ∏è {module['title']} (–ó–∞–≤–µ—Ä—à–µ–Ω–æ: {module['completed_at']})\n"

    await message.answer(response)


# –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
@intern_router.message(RoleFilter("intern"), F.text == "üìù –ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è")
async def check_exam_availability(message: Message):
    user_id = message.from_user.id
    exam_access = await db.check_final_exam_access(user_id)

    if exam_access:
        await message.answer(
            "üéì –í—ã –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–±—É—á–µ–Ω–∏–µ! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –∏—Ç–æ–≥–æ–≤—É—é –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é.",
            reply_markup=get_start_exam_keyboard(),
        )
    else:
        await message.answer("üìö –í–∞–º –Ω—É–∂–Ω–æ –∑–∞–≤–µ—Ä—à–∏—Ç—å –≤—Å–µ –º–æ–¥—É–ª–∏ –ø–µ—Ä–µ–¥ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–µ–π.")


# –û—Ç–∫—Ä—ã—Ç–∏–µ –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –º–æ–¥—É–ª—è
@intern_router.callback_query(RoleFilter("intern"), F.data.startswith("open_module_"))
async def open_module(callback: CallbackQuery, state: FSMContext):
    module_id = int(callback.data.split("_")[-1])
    lessons = await db.get_lessons_by_module(module_id)

    if not lessons:
        await callback.message.answer("‚ùó –í —ç—Ç–æ–º –º–æ–¥—É–ª–µ –ø–æ–∫–∞ –Ω–µ—Ç —É—Ä–æ–∫–æ–≤.")
        return
    await state.update_data(module_id=module_id, lesson_index=0)
    await callback.message.answer("–ù–∞—á–∞—Ç–æ –æ–±—É—á–µ–Ω–∏–µ!", reply_markup=get_back_keyboard())
    data = await state.get_data()
    temporary_msgs = data.get("temporary_msgs", [])
    if temporary_msgs != []:
        for msg_id in temporary_msgs:
            await bot.delete_message(chat_id=callback.from_user.id, message_id=msg_id)
        await state.update_data(temporary_msgs=[])
    await send_lesson(callback.message, state, 0, module_id)


@intern_router.callback_query(RoleFilter("intern"), F.data.startswith("open_lesson_"))
async def change_lesson(callback: CallbackQuery, state: FSMContext):
    lesson_id = int(callback.data.split("_")[-1])
    module_id = int(callback.data.split("_")[-2])
    data = await state.get_data()
    temporary_msgs = data.get("temporary_msgs", [])
    if temporary_msgs != []:
        for msg_id in temporary_msgs:
            await bot.delete_message(chat_id=callback.from_user.id, message_id=msg_id)
        await state.update_data(temporary_msgs=[])
    await send_lesson(callback.message, state, lesson_id, module_id)


# –û—Ç–ø—Ä–∞–≤–∫–∞ —É—Ä–æ–∫–∞ —Å –Ω–∞–≤–∏–≥–∞—Ü–∏–µ–π
async def send_lesson(message: Message, state: FSMContext, index, module_id):
    lessons = await db.get_lessons_by_module(module_id)
    lesson = lessons[index]
    total_lessons = len(lessons)

    text = f"<b>{lesson['title']}</b>\n–§–∞–π–ª—ã —É—Ä–æ–∫–∞:"

    buttons = []
    if index > 0:
        buttons.append(
            InlineKeyboardButton(
                text="‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data=f"open_lesson_{module_id}_{index - 1}"
            )
        )
    if index < total_lessons - 1:
        buttons.append(
            InlineKeyboardButton(
                text="‚û°Ô∏è –í–ø–µ—Ä—ë–¥", callback_data=f"open_lesson_{module_id}_{index + 1}"
            )
        )
    buttons.append(
        InlineKeyboardButton(
            text="‚úÖ –ó–∞–≤–µ—Ä—à–∏—Ç—å", callback_data=f"finish_module_{module_id}"
        )
    )

    data = await state.get_data()
    new_temporary_msgs = data.get("temporary_msgs", [])

    keyboard = InlineKeyboardMarkup(inline_keyboard=[buttons])
    msg = await message.answer(text)
    new_temporary_msgs.append(msg.message_id)
    for file_id in lesson.get("file_ids", []):
        msg = await message.answer_document(file_id)
        new_temporary_msgs.append(msg.message_id)

    for video_id in lesson.get("video_ids", []):
        msg = await message.answer_video(video_id)
        new_temporary_msgs.append(msg.message_id)
    msg = await message.answer(f"{lesson['content']}")
    new_temporary_msgs.append(msg.message_id)
    msg = await message.answer("<b>–ü—Ä–æ–¥–æ–ª–∂–∏–º?</b>", reply_markup=keyboard)
    new_temporary_msgs.append(msg.message_id)
    await state.update_data(temporary_msgs=new_temporary_msgs)


# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –º–æ–¥—É–ª—è
@intern_router.callback_query(RoleFilter("intern"), F.data.startswith("finish_module_"))
async def finish_module(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    temporary_msgs = data.get("temporary_msgs", [])
    for msg_id in temporary_msgs:
        await bot.delete_message(chat_id=callback.from_user.id, message_id=msg_id)

    module_id = int(callback.data.split("_")[-1])

    # –ü–æ–ª—É—á–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã —Ç–µ—Å—Ç–∞ –∏–∑ –ë–î
    questions = await db.get_test_questions(module_id)

    if not questions:
        # TODO: –°–ß–ò–¢–ê–ï–ú –ú–û–î–£–õ–¨ –ü–†–û–ô–î–ï–ù–ù–´–ú
        await callback.message.answer(
            "‚ùó –î–ª—è —ç—Ç–æ–≥–æ –º–æ–¥—É–ª—è —Ç–µ—Å—Ç –µ—â—ë –Ω–µ —Å–æ–∑–¥–∞–Ω.",
            reply_markup=get_intern_keyboard(),
        )
        return

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤–æ–ø—Ä–æ—Å—ã –≤ FSM
    await state.update_data(
        module_id=module_id,
        questions=questions,
        current_question_index=0,
        correct_answers=0,
    )
    await send_next_question(callback.message, state)


# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
async def send_next_question(message: Message, state: FSMContext):
    data = await state.get_data()
    questions = data.get("questions", [])
    current_index = data.get("current_question_index", 0)

    if current_index >= len(questions):
        await finish_test(message, state)
        return

    question = questions[current_index]
    keyboard = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text=question[f"option_{i}"], callback_data=f"answer_{i}"
                )
            ]
            for i in range(1, 5)
        ]
    )

    await message.answer(f"‚ùì {question['question']}", reply_markup=keyboard)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
@intern_router.callback_query(RoleFilter("intern"), F.data.startswith("answer_"))
async def handle_answer(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    questions = data.get("questions", [])
    current_index = data.get("current_question_index", 0)
    correct_answers = data.get("correct_answers", 0)

    question = questions[current_index]
    selected_option = int(callback.data.split("_")[-1])

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–∞
    if selected_option == question["correct_option"]:
        correct_answers += 1

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ FSM
    await state.update_data(
        current_question_index=current_index + 1, correct_answers=correct_answers
    )

    await send_next_question(callback.message, state)


async def finish_test(message: Message, state: FSMContext):
    data = await state.get_data()
    module_id = data.get("module_id")
    correct_answers = data.get("correct_answers", 0)
    total_questions = len(data.get("questions", []))

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è —Ç–µ—Å—Ç–∞
    if (
        correct_answers / total_questions >= 0.7
    ):  # –£—Å–ø–µ—à–Ω–æ–µ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ: 70% –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤
        await db.update_module_progress(
            user_id=message.chat.id, module_id=module_id, is_completed=True
        )

        # –î–µ–ª–∞–µ–º —Å–ª–µ–¥—É—é—â–∏–π –º–æ–¥—É–ª—å –¥–æ—Å—Ç—É–ø–Ω—ã–º
        next_module_id = await db.get_next_module_id(module_id)
        if next_module_id:
            await db.make_module_accessible(message.chat.id, next_module_id)
            await message.answer(
                f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç –º–æ–¥—É–ª—è! –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers} –∏–∑ {total_questions}.\n"
                f"üîì –î–æ—Å—Ç—É–ø –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –º–æ–¥—É–ª—é –æ—Ç–∫—Ä—ã—Ç!",
                reply_markup=get_intern_keyboard(),
            )
        else:
            await message.answer(
                f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ —Ç–µ—Å—Ç –º–æ–¥—É–ª—è! –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers} –∏–∑ {total_questions}.\n"
                f"‚úÖ –≠—Ç–æ –±—ã–ª –ø–æ—Å–ª–µ–¥–Ω–∏–π –º–æ–¥—É–ª—å!",
                reply_markup=get_intern_keyboard(),
            )
    else:
        await message.answer(
            f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω. –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤: {correct_answers} –∏–∑ {total_questions}.\n"
            f"üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –º–æ–¥—É–ª—å –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.",
            reply_markup=get_intern_keyboard(),
        )

    await state.clear()


# –ù–∞—á–∞–ª–æ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
@intern_router.callback_query(RoleFilter("intern"), F.data == "start_final_exam")
async def start_final_exam(callback: CallbackQuery, state: FSMContext):
    questions = await db.get_final_exam_questions()

    if not questions:
        await callback.message.answer(
            "‚ùó –í —Å–∏—Å—Ç–µ–º–µ –ø–æ–∫–∞ –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –¥–ª—è –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏."
        )
        return

    await state.update_data(exam_questions=questions, current_question=0, answers=[])

    await callback.message.answer(
        "üìù –ù–∞—á–∏–Ω–∞–µ–º –∏—Ç–æ–≥–æ–≤—É—é –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é!", reply_markup=ReplyKeyboardRemove()
    )
    await send_next_exam_question(callback.message, state)



# –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
async def send_next_exam_question(message: Message, state: FSMContext):
    data = await state.get_data()
    questions = data.get("exam_questions", [])
    current_index = data.get("current_question", 0)

    if current_index >= len(questions):
        await finish_final_exam(message, state)
        return

    question = questions[current_index]
    question_text = f"‚ùì {question['question']}"

    if question["is_open_question"]:
        await message.answer(f"{question_text}\n–í–≤–µ–¥–∏—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤—ã–π –æ—Ç–≤–µ—Ç:")
        await state.set_state(FinalExamFSM.waiting_for_open_answer)
    else:
        await message.answer(
            question_text, reply_markup=get_exam_answers_keyboard(question)
        )

    await state.update_data(current_question=current_index + 1)


# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
@intern_router.callback_query(RoleFilter("intern"), F.data.startswith("exam_answer_"))
async def handle_exam_answer(callback: CallbackQuery, state: FSMContext):
    data = await state.get_data()
    questions = data.get("exam_questions", [])
    current_index = data.get("current_question", 0)
    answers = data.get("answers", [])

    if current_index == 0 or current_index > len(questions):
        return  # –û—à–∏–±–æ—á–Ω—ã–π –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞

    question = questions[current_index - 1]
    selected_option = int(callback.data.split("_")[-1])

    is_correct = selected_option == question["correct_option"]
    answers.append(
        {
            "question_id": question["id"],
            "chosen_option": selected_option,
            "open_answer": None,  # –û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–¥–µ–ª—å–Ω–æ
            "is_correct": is_correct,
        }
    )

    await state.update_data(answers=answers)
    await send_next_exam_question(callback.message, state)



# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã
@intern_router.message(RoleFilter("intern"), FinalExamFSM.waiting_for_open_answer)
async def handle_open_exam_answer(message: Message, state: FSMContext):
    data = await state.get_data()
    questions = data.get("exam_questions", [])
    current_index = data.get("current_question", 0)
    answers = data.get("answers", [])

    if current_index == 0 or current_index > len(questions):
        return  # –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞

    question = questions[current_index - 1]  # –ë–µ—Ä—ë–º –ø—Ä–µ–¥—ã–¥—É—â–∏–π –≤–æ–ø—Ä–æ—Å

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    user_answer = message.text.strip()
    answers.append(
        {
            "question_id": question["id"],
            "chosen_option": None,  # NULL, —Ç–∞–∫ –∫–∞–∫ —ç—Ç–æ –æ—Ç–∫—Ä—ã—Ç—ã–π –≤–æ–ø—Ä–æ—Å
            "open_answer": user_answer,
            "is_correct": None,  # –û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–¥–º–∏–Ω
        }
    )

    await state.update_data(answers=answers)

    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    await send_next_exam_question(message, state)



# –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏
async def finish_final_exam(message: Message, state: FSMContext):
    data = await state.get_data()
    user_id = message.from_user.id
    answers = data.get("answers", [])

    if not answers:
        await message.answer("‚ùå –û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã.")
        return

    # –§–∏–ª—å—Ç—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –≤–æ–ø—Ä–æ—Å—ã (—É –Ω–∏—Ö –µ—Å—Ç—å chosen_option) –∏ –æ—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã (—É –Ω–∏—Ö –µ—Å—Ç—å open_answer)
    test_answers = [ans for ans in answers if ans.get("chosen_option") is not None]
    open_answers = [ans for ans in answers if ans.get("open_answer") is not None]

    correct_test_answers = sum(
        1 for answer in test_answers if answer.get("is_correct") is True
    )
    total_test_questions = len(test_answers)

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —É—Å–ø–µ—à–Ω–æ–≥–æ –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è (–¢–û–õ–¨–ö–û –¥–ª—è —Ç–µ—Å—Ç–æ–≤–æ–π —á–∞—Å—Ç–∏)
    passed = (
        correct_test_answers / total_test_questions >= 0.7
        if total_test_questions > 0
        else False
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏–∏ –≤ `final_exam_results`
    await db.save_exam_result(
        user_id, total_test_questions, correct_test_answers, passed
    )

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç—ã –≤ `final_exam_answers`
    await db.save_exam_answers(user_id, answers)

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
    await notify_admin_about_exam(
        user_id, correct_test_answers, total_test_questions, passed, open_answers
    )

    # –û—á–∏—Å—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è FSM
    await state.clear()

    if passed:
        await message.answer(
            f"üéâ –í—ã —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ—à–ª–∏ –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é!\n"
            f"‚úîÔ∏è {correct_test_answers}/{total_test_questions} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤.",
            reply_markup=get_intern_keyboard(),
        )
    else:
        await message.answer(
            f"‚ùå –ê—Ç—Ç–µ—Å—Ç–∞—Ü–∏—è –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞. ({correct_test_answers}/{total_test_questions})\n"
            f"–ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
        )



# –û—Ç–ø—Ä–∞–≤–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
async def notify_admin_about_exam(
    user_id: int,
    correct_test_answers: int,
    total_test_questions: int,
    passed: bool,
    open_answers: list,
):
    admin_id = await db.get_admin_id()
    user_info = await db.get_employee_info(user_id)
    if not admin_id:
        return  # –ï—Å–ª–∏ –∞–¥–º–∏–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –Ω–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º

    result_text = (
        "‚úÖ –¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –ø—Ä–æ–π–¥–µ–Ω–∞" if passed else "‚ùå –¢–µ—Å—Ç–æ–≤–∞—è —á–∞—Å—Ç—å –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞"
    )

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –æ—Ç–∫—Ä—ã—Ç—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤
    open_answers_text = "\n\nüìñ <b>–û—Ç–∫—Ä—ã—Ç—ã–µ –≤–æ–ø—Ä–æ—Å—ã:</b>\n"
    if open_answers:
        for ans in open_answers:
            open_answers_text += f"‚û°Ô∏è –í–æ–ø—Ä–æ—Å {ans['question_id']}:\nüí¨ –û—Ç–≤–µ—Ç: {ans.get('open_answer', '–ù–µ—Ç –æ—Ç–≤–µ—Ç–∞')}\n\n"
    else:
        open_answers_text = ""

    message_text = (
        f"üìä <b>–°—Ç–∞–∂—ë—Ä {user_info['full_name']} –∑–∞–≤–µ—Ä—à–∏–ª –∞—Ç—Ç–µ—Å—Ç–∞—Ü–∏—é!</b>\n"
        f"‚úîÔ∏è {correct_test_answers} / {total_test_questions} –ø—Ä–∞–≤–∏–ª—å–Ω—ã—Ö —Ç–µ—Å—Ç–æ–≤—ã—Ö –æ—Ç–≤–µ—Ç–æ–≤\n"
        f"{result_text}"
        f"{open_answers_text}"
    )

    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∞–¥–º–∏–Ω—É
    await bot.send_message(
        admin_id, message_text, reply_markup=get_exam_result_keyboard(user_id)
    )
